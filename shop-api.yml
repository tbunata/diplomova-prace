openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/tbunata/shop/1.0.0
info:
  description: Simple shop API for the purposes of diploma thesis
  version: "1.0.0"
  title: Shop API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: "user"
    description: ""
  - name: "product"
    description: ""
  - name: "cart"
    description: ""
  - name: "order"
    description: ""
  - name: "category"
    description: ""  
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: ""
      operationId: "createUser"
      requestBody:
        description: "Create a new user"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        "201":
          description: "User created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Invalid input"
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user"
      operationId: "getUser"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the user to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Edit user"
      operationId: "editUser"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the user to edit"
      requestBody:
        description: "New values to be set"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUser'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
        - in: "path"
          name: "userId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the user to delete"
      responses:
        "204":
          description: "The user was deleted successfully"
        "404":
          description: "User not found"
  /users/login:
    post:
      tags:
      - "user"
      summary: "logs user into the system"
      description: ""
      operationId: "loginUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "user@email.com"
                password:
                  type: "string"
                  example: "secret"
      responses:
        "200":
          description: "Succesful login"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
                  refreshToken:
                    type: "string"
        "400":
          description: "Invalid username/password"
  /users/refresh:
    post:
      tags:
      - "user"
      summary: "refreshes token"
      description: ""
      operationId: "refreshToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "user@email.com"
                refreshToken:
                  type: "string"

      responses:
        "200":
          description: "Succesful login"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        "400":
          description: "Invalid username/password"

  /products:
    post:
      tags:
      - "product"
      summary: "Create a new product"
      description: ""
      operationId: "createProduct"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        "201":
          description: "Product created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: "Invalid input"
    get:
      tags:
      - "product"
      summary: "List products"
      description: ""
      operationId: "listProducts"
      parameters:
        - in: query
          name: "minPrice"
          required: false
          schema:
            type: "number"
        - in: query
          name: "maxPrice"
          required: false
          schema:
            type: "number"
        - in: query
          name: "ids"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Invalid input"
  /products/{productId}:
    get:
      tags:
      - "product"
      summary: "Get product"
      operationId: "getProduct"
      parameters:
        - in: "path"
          name: "productId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the product to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: "Product not found"
    put:
      tags:
      - "product"
      summary: "Edit product"
      operationId: "editProduct"
      parameters:
        - in: "path"
          name: "productId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the product to edit"
      requestBody:
        description: "New values to be set"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: "Product not found"
    delete:
      tags:
      - "product"
      summary: "Delete product"
      operationId: "deleteProduct"
      parameters:
        - in: "path"
          name: "productId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the product to delete"
      responses:
        "204":
          description: "The product was deleted successfully"
        "404":
          description: "Product not found"
  /carts/detail:
    get:
      tags:
      - "cart"
      summary: "List items in a given cart"
      parameters:
        - in: cookie
          name: "userId"
          schema:
            type: "integer"
          required: true
      responses:
        "200":
          description: "Succesful operation. Returns list of cart items"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "404":
          description: "Cart not found"
  /carts/addItem:
    post:
      tags:
      - "cart"
      summary: "Add an item into given cart"
      operationId: "cartAddItem"
      parameters:
      - in: "cookie"
        name: "userId"
        schema:
          type: "integer"
        required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                quantity:
                  type: "integer"
                productId:
                  type: "integer"
      responses:
        "201":
          description: "Item added to cart"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "404":
          description: "Cart/product not found"
  /carts/updateItem:
    put:
      tags:
      - "cart"
      summary: "Edit an item in a given cart"
      operationId: "cartEditItem"
      parameters:
      - in: "cookie"
        name: "userId"
        schema:
          type: "integer"
        required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                quantity:
                  type: "integer"
                productId:
                  type: "integer"
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: "Invalid data"
        "404":
          description: "Cart/product not found"
  /carts/clearCart:
    delete:
      tags:
      - "cart"
      summary: "Delete all items from given cart"
      operationId: "emptyCart"
      parameters:
      - in: "cookie"
        name: "userId"
        schema:
          type: "integer"
        required: true
      responses:
        "204":
          description: "Cart deleted"
        "404":
          description: "Cart/product not found"
  /carts/checkout:
    post:
      tags:
      - "cart"
      summary: "Checkout the given cart"
      parameters:
      - in: "cookie"
        name: "userId"
        schema:
          type: "integer"
        required: true
      responses:
        "201":
          description: "Order created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: "Cart not found"
  /orders:
    get:
      tags:
      - "order"
      summary: "List all orders according to the parameters"
      parameters:
        - in: "query"
          name: "userId"
          schema:
            type: "integer"
          required: false
        - in: "query"
          name: "dateFrom"
          schema:
            type: "string"
          required: false
        - in: "query"
          name: "dateTo"
          schema:
            type: "string"
          required: false
        - in: "query"
          name: "status"
          schema:
            type: "string"
          required: false
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
  /orders/{orderId}:
    get:
      tags:
      - "order"
      summary: "Get order detail"
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
        required: true
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      tags:
      - "order"
      summary: "Cancel Order"
      operationId: "deleteOrder"
      parameters:
        - in: "path"
          name: "orderId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the order to cancel"
      responses:
        "204":
          description: "The order was cancelled successfully"
        "404":
          description: "Order not found"
  /orders/{orderId}/updateStatus:
    put:
      tags:
      - "order"
      summary: "Edit a given order"
      parameters:
      - in: "path"
        name: "orderId"
        schema:
          type: "integer"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
                  example: 2
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /categories:
    post:
      tags:
      - "category"
      summary: "Create a new category"
      description: ""
      operationId: "createCategory"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategory'
      responses:
        "201":
          description: "Category created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: "Invalid input"
    get:
      tags:
      - "category"
      summary: "List categories"
      description: ""
      operationId: "listCategories"
      responses:
        "200":
          description: "Succesful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Category"
        "400":
          description: "Invalid input"
  /categories/{categoryId}:
    get:
      tags:
      - "category"
      summary: "Get category"
      operationId: "getCategory"
      parameters:
        - in: "path"
          name: "categoryId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the category to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          description: "Category not found"
    put:
      tags:
      - "category"
      summary: "Edit category"
      operationId: "editCategory"
      parameters:
        - in: "path"
          name: "categoryId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the category to edit"
      requestBody:
        description: "New values to be set"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          description: "Category not found"
    delete:
      tags:
      - "category"
      summary: "Delete category"
      operationId: "deleteCategory"
      parameters:
        - in: "path"
          name: "categoryId"
          schema:
            type: "integer"
          required: true
          description: "Numeric id of the category to delete"
      responses:
        "204":
          description: "The category was deleted successfully"
        "404":
          description: "Category not found"
components:
  schemas:
    CreateUser:
      type: "object"
      properties:
        firstName:
          type: "string"
          example: "Samuel"
        lastName:
          type: "string"
          example: "Vimes"
        email:
          type: "string"
          example: "commander@citywatch.am"
        password:
          type: "string"
          example: "secret"
        phone:
          type: "string"
          example: "555431609"
        address:
          type: "string"
          example: "Ramkin residence"
        city:
          type: "string"
          example: "Ankh-Morpork"
        zipCode:
          type: "string"
          example: "123 00"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        firstName:
          type: "string"
          example: "Samuel"
        lastName:
          type: "string"
          example: "Vimes"
        email:
          type: "string"
          example: "commander@citywatch.am"
        phone:
          type: "string"
          example: "555431609"
        address:
          type: "string"
          example: "Ramkin residence"
        city:
          type: "string"
          example: "Ankh-Morpork"
        zipCode:
          type: "string"
          example: "123 00"
        status:
          type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            name:
              type: "string"
              example: "Created"
    EditUser:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        firstName:
          type: "string"
          example: "Samuel"
        lastName:
          type: "string"
          example: "Vimes"
        email:
          type: "string"
          example: "commander@citywatch.am"
        password:
          type: "string"
          example: "secret"
        phone:
          type: "string"
          example: "555431609"
        address:
          type: "string"
          example: "Ramkin residence"
        city:
          type: "string"
          example: "Ankh-Morpork"
        zipCode:
          type: "string"
          example: "123 00"
        statusId:
          type: "integer"
          example: 1
    Category:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        name:
          type: "string"
          example: "Men"
        description:
          type: "string"
          example: "Products for men"
    CreateCategory:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Men"
        description:
          type: "string"
          example: "Products for men"
    Product:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 42
        category:
          type: "array"
          items:
            $ref: "#/components/schemas/Category"
        name:
          type: "string"
          example: "Leather jacket"
        description:
          type: "string"
          example: "Jacket for tough weather"
        status:
          type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            name:
              type: "string"
              example: "New"
        price:
          type: "number"
          example: 10
        brand:
          type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            name:
              type: "string"
              example: "Jacket company"
    CreateProduct:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Leather jacket"
        description:
          type: "string"
          example: "Jacket for tough weather"
        statusId:
          type: "integer"
          example: 1
        price:
          type: "number"
          example: 9999
        quantity:
          type: "number"
          example: 10
        brandId:
          type: "integer"
          example: 1
        categoryIds:
          type: "array"
          items:
            type: "integer"
            example: 1
    UpdateProduct:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "Leather jacket"
        description:
          type: "string"
          example: "Jacket for tough weather"
        statusId:
          type: "integer"
          example: 1
        price:
          type: "number"
          example: 9999
        quantity:
          type: "number"
          example: 10
        brandId:
          type: "integer"
          example: 1
        categoryIds:
          type: "array"
          items:
            type: "integer"
            example: 1
    CartItem:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 16
        productId:
          type: "integer"
          format: "int64"
          example: 16
        name:
          type: "string"
          example: "Leather jacket"
        description:
          type: "string"
          example: "Orlando Oxfords' leather jacket"
        price:
          type: "number"
          example: 12000
        quantity:
          type: "integer"
          format: "int32"
          example: 1
    Cart:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 16
        userId:
          type: "integer"
          example: 1
        totalPrice:
          type: "number"
          example: 12000
        items:
          type: "array"
          items: 
            $ref: "#/components/schemas/CartItem"
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 16
        userId:
          type: "integer"
          example: 1
        totalPrice:
          type: "number"
          example: 12000
        items:
          type: "array"
          items: 
            $ref: "#/components/schemas/CartItem"
        status:
          type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            name:
              type: "string"
              example: "New"
        createdDate:
          type: "string"
          example: "2017-08-19 12:17:55 -0400"
        updatedDate:
          type: "string"
          example: "2017-08-19 12:17:55 -0400"